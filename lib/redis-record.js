// Generated by CoffeeScript 1.3.3
(function() {
  var RedisRecord, bases, crypto, inflection, redis, _;

  redis = require("redis");

  inflection = require("inflection");

  bases = require("bases");

  crypto = require("crypto");

  _ = require("underscore");

  RedisRecord = (function() {
    var db, klass, list_lookup;

    list_lookup = "-- fetch all assoc ids\nlocal ids = redis.call(\"ZRANGE\", ARGV[2], 0, -1)\n  \nlocal result = {}\nlocal hashValue = nil\n\n-- generate correct namespace\nlocal namespace = ARGV[1]..\"|\"\n\nfor i,v in ipairs(ids) do\n  hashValue = redis.call(\"HGETALL\", namespace..v)\n  table.insert(hashValue, \"id\")\n  table.insert(hashValue, v)\n  result[i] = hashValue\nend\nreturn result";

    db = redis.createClient();

    klass = null;

    function RedisRecord(obj) {
      this.obj = obj;
      klass = this.constructor;
      console.log("consturctor " + klass.name);
      if (klass.hasUniqKey) {
        if (!obj.key) {
          obj.key = klass.generateKey();
        }
      }
      this.id = obj.id;
      klass._generateAssociationMethods();
    }

    RedisRecord.prototype.id = function() {
      return this.id;
    };

    RedisRecord.prototype.get = function(attr) {
      return this.obj[attr];
    };

    RedisRecord.prototype.set = function(attr, value) {
      return this.obj[attr] = value;
    };

    RedisRecord.prototype["delete"] = function(cb) {
      var _this = this;
      console.log("delete " + (klass._name()) + " with id: " + this.id);
      db.DEL(this._dbKey(), function(err, reply) {
        return db.ZREM(klass._indexKey(), _this.id, cb);
      });
      return this._removeAssociations();
    };

    RedisRecord.prototype.save = function(cb, create) {
      var _this = this;
      if (create == null) {
        create = false;
      }
      if (this.id === void 0 || this.id === null) {
        return this._nextId(function(id) {
          _this.id = id;
          _this.obj.createdAt = new Date();
          return _this.save(cb, true);
        });
      } else {
        this._stripFalsyValues();
        this.obj.updatedAt = new Date();
        return db.HMSET(this._dbKey(), klass.stringifyAttributes(this.obj), function(err, reply) {
          if (!err) {
            if (create) {
              return _this._afterCreate(cb);
            } else {
              if (typeof cb === "function") {
                return cb(null, reply);
              }
            }
          } else {
            return cb(err, null);
          }
        });
      }
    };

    RedisRecord.prototype.toString = function() {
      return JSON.stringify(this.obj);
    };

    RedisRecord.prototype.toJSON = function() {
      return this.obj;
    };

    RedisRecord.create = function(obj, cb) {
      return new this(obj).save(cb, true);
    };

    RedisRecord.all = function(cb) {
      var _this = this;
      return db["eval"](list_lookup, 0, this._name(), this._indexKey(), function(err, reply) {
        return cb(err, _this._arrayReplyToObjects(reply));
      });
    };

    RedisRecord.find = function(id, cb) {
      var _this = this;
      if (!id) {
        return;
      }
      if (id.length !== 32 && !isNaN(id)) {
        return db.HGETALL(this._dbKey(id), function(err, obj) {
          if (obj) {
            obj.id = id;
            return cb(null, new _this(obj));
          } else {
            return cb(err, null);
          }
        });
      } else {
        return this.findBy("key", id, cb);
      }
    };

    RedisRecord.findOrCreate = function(obj, cb) {
      var _this = this;
      if (obj.id) {
        return this.find(obj.id, function(err, reply) {
          if (!reply) {
            return _this.create(obj, cb);
          } else {
            return cb(err, reply);
          }
        });
      } else {
        return this.create(obj, cb);
      }
    };

    RedisRecord.findBy = function(key, value, cb) {
      var _this = this;
      if (_.contains(this.lookUpBy, key)) {
        return db.GET(this._lookUpKey(key, value), function(err, reply) {
          if (reply) {
            return _this.find(reply, cb);
          } else {
            return cb(err, reply);
          }
        });
      } else {
        return cb("key not available for lookup", null);
      }
    };

    RedisRecord.count = function(cb) {
      return db.get(this._countKey(), cb);
    };

    RedisRecord.stringifyAttributes = function(obj) {
      var k, sObj, v;
      sObj = {};
      for (k in obj) {
        v = obj[k];
        sObj[k] = "" + v;
      }
      return sObj;
    };

    RedisRecord.generateKey = function(length) {
      var bytes, i, maxNum, num, numBytes;
      if (length == null) {
        length = 32;
      }
      maxNum = Math.pow(62, length);
      numBytes = Math.ceil(Math.log(maxNum) / Math.log(256));
      while (true) {
        bytes = crypto.randomBytes(numBytes);
        num = 0;
        i = 0;
        while (i < bytes.length) {
          num += Math.pow(256, i) * bytes[i];
          i++;
        }
        if (!(num >= maxNum)) {
          break;
        }
      }
      return bases.toBase62(num);
    };

    RedisRecord.prototype._assocKey = function(assoc) {
      var assocId, cN;
      cN = inflection.pluralize(klass._name());
      assocId = this.obj["" + assoc + "Id"];
      return "" + cN + "_for_" + assoc + "|" + assocId;
    };

    RedisRecord.prototype._hasManyKey = function(assoc) {
      return "" + assoc + "_for_" + (klass._name()) + "|" + this.id;
    };

    RedisRecord.prototype._nextId = function(cb) {
      var _this = this;
      return db.INCR("" + (klass._name()) + "|count", function(err, val) {
        return cb(val);
      });
    };

    RedisRecord.prototype._afterCreate = function(cb) {
      var _this = this;
      console.log("stored " + (klass._name()) + " with id: " + this.id + " ");
      return db.ZADD(klass._indexKey(), this.id, this.id, function(err, reply) {
        _this.obj.id = _this.id;
        console.log("after create name " + (klass._name()));
        _this._applyAssociations();
        return cb(err, _.clone(_this));
      });
    };

    RedisRecord.prototype._applyAssociations = function(cb) {
      return this._handleAssociations(cb, "add");
    };

    RedisRecord.prototype._removeAssociations = function(cb) {
      return this._handleAssociations(cb, "remove");
    };

    RedisRecord.prototype._handleAssociations = function(cb, mode) {
      if (this.id) {
        this._maintainAssociationReferences(cb, mode);
        return this._maintainLookupKeys(mode);
      }
    };

    RedisRecord.prototype._maintainAssociationReferences = function(cb, mode) {
      var assoc, _i, _len, _ref, _results,
        _this = this;
      if (klass.belongsTo) {
        _ref = klass.belongsTo;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          assoc = _ref[_i];
          _results.push((function(assoc) {
            if (_this.obj["" + assoc + "Id"]) {
              if (mode === "add") {
                return db.ZADD(_this._assocKey(assoc), _this.id, _this.id, cb);
              } else {
                return db.ZREM(_this._assocKey(assoc), _this.id, cb);
              }
            }
          })(assoc));
        }
        return _results;
      }
    };

    RedisRecord.prototype._maintainLookupKeys = function(mode) {
      var key, _i, _len, _ref, _results,
        _this = this;
      if (klass.lookUpBy) {
        _ref = klass.lookUpBy;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          _results.push((function(key) {
            if (_this.obj[key]) {
              if (mode === "add") {
                return db.SET(klass._lookUpKey(key, _this.obj[key]), _this.id, function(err, reply) {
                  if (err) {
                    return console.log("error");
                  }
                });
              } else {
                return db.DEL(klass._lookUpKey(key, _this.obj[key]));
              }
            }
          })(key));
        }
        return _results;
      }
    };

    RedisRecord.prototype._dbKey = function() {
      return klass._dbKey(this.id);
    };

    RedisRecord.prototype._stripFalsyValues = function() {
      var _this = this;
      return _.each(this.obj, function(v, k) {
        if (!v) {
          return delete _this.obj[k];
        }
      });
    };

    RedisRecord._lookUpKey = function(key, value) {
      return "" + (this._name()) + "|" + key + "|" + value;
    };

    RedisRecord._generateAssociationMethods = function() {
      this._gernateHasManyAssociationsMethods();
      return this._gernateBelongsToAssociationsMethods();
    };

    RedisRecord._gernateBelongsToAssociationsMethods = function() {
      var assoc, _i, _len, _ref, _results,
        _this = this;
      if (this.belongsTo) {
        _ref = this.belongsTo;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          assoc = _ref[_i];
          _results.push((function(assoc) {
            if (!_this.prototype[assoc]) {
              return _this.prototype[assoc] = function(cb) {
                var assocKey;
                assocKey = "" + assoc + "Id";
                console.log("assocKey " + assocKey);
                if (this.obj[assocKey]) {
                  return require("./" + assoc).find(this.obj[assocKey], cb);
                }
              };
            }
          })(assoc));
        }
        return _results;
      }
    };

    RedisRecord._gernateHasManyAssociationsMethods = function() {
      var assoc, _i, _len, _ref, _results,
        _this = this;
      if (this.hasMany) {
        _ref = this.hasMany;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          assoc = _ref[_i];
          _results.push((function(assoc) {
            if (!_this.prototype[assoc]) {
              return _this.prototype[assoc] = function(cb) {
                var cN,
                  _this = this;
                if (this.id !== void 0) {
                  cN = inflection.singularize(assoc);
                  return db["eval"](list_lookup, 0, cN, this._hasManyKey(assoc), function(err, reply) {
                    return cb(err, klass._arrayReplyToObjects(reply));
                  });
                }
              };
            }
          })(assoc));
        }
        return _results;
      }
    };

    RedisRecord._arrayReplyToObjects = function(reply) {
      if (reply) {
        reply = reply.map(function(obj) {
          return db.reply_to_object(obj);
        });
      }
      return reply;
    };

    RedisRecord._name = function() {
      return this.name.toLowerCase();
    };

    RedisRecord._dbKey = function(id) {
      return "" + (this._name()) + "|" + id;
    };

    RedisRecord._countKey = function(id) {
      return "" + (this._name()) + "|count";
    };

    RedisRecord._indexKey = function() {
      return "" + (this._name()) + "_ids";
    };

    return RedisRecord;

  })();

  module.exports = RedisRecord;

}).call(this);
